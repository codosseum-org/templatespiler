-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module Templ.Templatespiler.Par
  ( happyError
  , myLexer
  , pBindingList
  ) where

import Prelude

import qualified Templ.Templatespiler.Abs
import Templ.Templatespiler.Lex
import qualified Data.Text

}

%name pBindingList BindingList
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '('       { PT _ (TS _ 1)  }
  ')'       { PT _ (TS _ 2)  }
  ','       { PT _ (TS _ 3)  }
  ':'       { PT _ (TS _ 4)  }
  'Float'   { PT _ (TS _ 5)  }
  'Integer' { PT _ (TS _ 6)  }
  'String'  { PT _ (TS _ 7)  }
  '['       { PT _ (TS _ 8)  }
  ']'       { PT _ (TS _ 9)  }
  'array'   { PT _ (TS _ 10) }
  'list'    { PT _ (TS _ 11) }
  'sep-by'  { PT _ (TS _ 12) }
  L_Ident   { PT _ (TV $$)   }
  L_integ   { PT _ (TI $$)   }
  L_quoted  { PT _ (TL $$)   }

%%

Ident :: { Templ.Templatespiler.Abs.Ident }
Ident  : L_Ident { Templ.Templatespiler.Abs.Ident $1 }

Integer :: { Integer }
Integer  : L_integ  { (read (Data.Text.unpack $1)) :: Integer }

String  :: { String }
String   : L_quoted { (Data.Text.unpack $1) }

Type :: { Templ.Templatespiler.Abs.Type }
Type
  : 'Integer' { Templ.Templatespiler.Abs.IntegerType }
  | 'String' { Templ.Templatespiler.Abs.StringType }
  | 'Float' { Templ.Templatespiler.Abs.FloatType }
  | Combinator { Templ.Templatespiler.Abs.CombinatorType $1 }

TerminalBinding :: { Templ.Templatespiler.Abs.TerminalBinding }
TerminalBinding
  : Ident ':' Type { Templ.Templatespiler.Abs.SingleBinding $1 $3 }
  | '(' TerminalBinding ')' { Templ.Templatespiler.Abs.ParenBinding $2 }

BindingGroup :: { Templ.Templatespiler.Abs.BindingGroup }
BindingGroup
  : '[' ListTerminalBinding ']' { Templ.Templatespiler.Abs.BindingGroup $2 }

ListTerminalBinding :: { [Templ.Templatespiler.Abs.TerminalBinding] }
ListTerminalBinding
  : {- empty -} { [] }
  | TerminalBinding { (:[]) $1 }
  | TerminalBinding ',' ListTerminalBinding { (:) $1 $3 }

BindingOrCombinator :: { Templ.Templatespiler.Abs.BindingOrCombinator }
BindingOrCombinator
  : TerminalBinding { Templ.Templatespiler.Abs.NamedBinding $1 }
  | Combinator { Templ.Templatespiler.Abs.UnnamedBinding $1 }

Combinator :: { Templ.Templatespiler.Abs.Combinator }
Combinator
  : '(' Combinator ')' { Templ.Templatespiler.Abs.ParenCombinator $2 }
  | 'array' VarOrConstInt BindingOrCombinator { Templ.Templatespiler.Abs.ArrayCombinator $2 $3 }
  | 'sep-by' String BindingGroup { Templ.Templatespiler.Abs.SepByCombinator $2 $3 }
  | 'list' BindingOrCombinator { Templ.Templatespiler.Abs.ListCombinator $2 }

VarOrConstInt :: { Templ.Templatespiler.Abs.VarOrConstInt }
VarOrConstInt
  : Integer { Templ.Templatespiler.Abs.ConstInt $1 }
  | Ident { Templ.Templatespiler.Abs.ConstVar $1 }

BindingList :: { Templ.Templatespiler.Abs.BindingList }
BindingList
  : ListTerminalBinding { Templ.Templatespiler.Abs.BindingList $1 }

BindingListEntry :: { Templ.Templatespiler.Abs.BindingListEntry }
BindingListEntry
  : TerminalBinding { Templ.Templatespiler.Abs.BindingListEntry $1 }

ListBindingListEntry :: { [Templ.Templatespiler.Abs.BindingListEntry] }
ListBindingListEntry
  : {- empty -} { [] }
  | BindingListEntry ListBindingListEntry { (:) $1 $2 }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: Data.Text.Text -> [Token]
myLexer = tokens

}

