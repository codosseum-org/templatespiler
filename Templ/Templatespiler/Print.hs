-- File generated by the BNF Converter (bnfc 2.9.4.1).
{-# LANGUAGE CPP #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE LambdaCase #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif

-- | Pretty-printer for Templ.
module Templ.Templatespiler.Print where

import Data.Char (Char, isSpace)
import Data.Text qualified
import Templ.Templatespiler.Abs qualified
import Prelude (
  Bool (..),
  Double,
  Int,
  Integer,
  ShowS,
  String,
  all,
  elem,
  foldr,
  id,
  map,
  null,
  replicate,
  showChar,
  showString,
  shows,
  span,
  ($),
  (*),
  (+),
  (++),
  (-),
  (.),
  (<),
  (==),
 )

-- | The top-level printing method.
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 False (map ($ "") $ d []) ""
  where
    rend ::
      Int -> -- \^ Indentation level.
      Bool -> -- \^ Pending indentation to be output before next character?
      [String] ->
      ShowS
    rend i p = \case
      "[" : ts -> char '[' . rend i False ts
      "(" : ts -> char '(' . rend i False ts
      "{" : ts -> onNewLine i p . showChar '{' . new (i + 1) ts
      "}" : ";" : ts -> onNewLine (i - 1) p . showString "};" . new (i - 1) ts
      "}" : ts -> onNewLine (i - 1) p . showChar '}' . new (i - 1) ts
      [";"] -> char ';'
      ";" : ts -> char ';' . new i ts
      t : ts@(s : _)
        | closingOrPunctuation s ->
            pending . showString t . rend i False ts
      t : ts -> pending . space t . rend i False ts
      [] -> id
      where
        -- Output character after pending indentation.
        char :: Char -> ShowS
        char c = pending . showChar c

        -- Output pending indentation.
        pending :: ShowS
        pending = if p then indent i else id

    -- Indentation (spaces) for given indentation level.
    indent :: Int -> ShowS
    indent i = replicateS (2 * i) (showChar ' ')

    -- Continue rendering in new line with new indentation.
    new :: Int -> [String] -> ShowS
    new j ts = showChar '\n' . rend j True ts

    -- Make sure we are on a fresh line.
    onNewLine :: Int -> Bool -> ShowS
    onNewLine i p = (if p then id else showChar '\n') . indent i

    -- Separate given string from following text by a space (if needed).
    space :: String -> ShowS
    space t s =
      case (all isSpace t', null spc, null rest) of
        (True, _, True) -> [] -- remove trailing space
        (False, _, True) -> t' -- remove trailing space
        (False, True, False) -> t' ++ ' ' : s -- add space if none
        _ -> t' ++ s
      where
        t' = showString t []
        (spc, rest) = span isSpace s

    closingOrPunctuation :: String -> Bool
    closingOrPunctuation [c] = c `elem` closerOrPunct
    closingOrPunctuation _ = False

    closerOrPunct :: String
    closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.
class Print a where
  prt :: Int -> a -> Doc

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt i = concatD . map (prt i)

instance Print Char where
  prt _ c = doc (showChar '\'' . mkEsc '\'' c . showChar '\'')

instance Print String where
  prt _ = printString

printString :: String -> Doc
printString s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q = \case
  s | s == q -> showChar '\\' . showChar s
  '\\' -> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  s -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print Templ.Templatespiler.Abs.Ident where
  prt _ (Templ.Templatespiler.Abs.Ident i) = doc $ showString (Data.Text.unpack i)
instance Print Templ.Templatespiler.Abs.Type where
  prt i = \case
    Templ.Templatespiler.Abs.IntegerType -> prPrec i 0 (concatD [doc (showString "Integer")])
    Templ.Templatespiler.Abs.StringType -> prPrec i 0 (concatD [doc (showString "String")])
    Templ.Templatespiler.Abs.FloatType -> prPrec i 0 (concatD [doc (showString "Float")])
    Templ.Templatespiler.Abs.CombinatorType combinator -> prPrec i 0 (concatD [prt 0 combinator])

instance Print Templ.Templatespiler.Abs.TerminalBinding where
  prt i = \case
    Templ.Templatespiler.Abs.SingleBinding id_ type_ -> prPrec i 0 (concatD [prt 0 id_, doc (showString ":"), prt 0 type_])
    Templ.Templatespiler.Abs.ParenBinding terminalbinding -> prPrec i 0 (concatD [doc (showString "("), prt 0 terminalbinding, doc (showString ")")])

instance Print Templ.Templatespiler.Abs.BindingGroup where
  prt i = \case
    Templ.Templatespiler.Abs.BindingGroup terminalbindings -> prPrec i 0 (concatD [doc (showString "["), prt 0 terminalbindings, doc (showString "]")])

instance Print [Templ.Templatespiler.Abs.TerminalBinding] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x : xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print Templ.Templatespiler.Abs.BindingOrCombinator where
  prt i = \case
    Templ.Templatespiler.Abs.NamedBinding terminalbinding -> prPrec i 0 (concatD [prt 0 terminalbinding])
    Templ.Templatespiler.Abs.UnnamedBinding combinator -> prPrec i 0 (concatD [prt 0 combinator])

instance Print Templ.Templatespiler.Abs.Combinator where
  prt i = \case
    Templ.Templatespiler.Abs.ParenCombinator combinator -> prPrec i 0 (concatD [doc (showString "("), prt 0 combinator, doc (showString ")")])
    Templ.Templatespiler.Abs.ArrayCombinator varorconstint bindingorcombinator -> prPrec i 0 (concatD [doc (showString "array"), prt 0 varorconstint, prt 0 bindingorcombinator])
    Templ.Templatespiler.Abs.SepByCombinator str bindinggroup -> prPrec i 0 (concatD [doc (showString "sep-by"), printString str, prt 0 bindinggroup])
    Templ.Templatespiler.Abs.ListCombinator bindingorcombinator -> prPrec i 0 (concatD [doc (showString "list"), prt 0 bindingorcombinator])

instance Print Templ.Templatespiler.Abs.VarOrConstInt where
  prt i = \case
    Templ.Templatespiler.Abs.ConstInt n -> prPrec i 0 (concatD [prt 0 n])
    Templ.Templatespiler.Abs.ConstVar id_ -> prPrec i 0 (concatD [prt 0 id_])

instance Print Templ.Templatespiler.Abs.BindingList where
  prt i = \case
    Templ.Templatespiler.Abs.BindingList bindinglistentrys -> prPrec i 0 (concatD [prt 0 bindinglistentrys])

instance Print Templ.Templatespiler.Abs.BindingListEntry where
  prt i = \case
    Templ.Templatespiler.Abs.BindingListEntry terminalbinding -> prPrec i 0 (concatD [prt 0 terminalbinding])

instance Print [Templ.Templatespiler.Abs.BindingListEntry] where
  prt _ [] = concatD []
  prt _ (x : xs) = concatD [prt 0 x, doc (showString "\n"), prt 0 xs]
