-- File generated by the BNF Converter (bnfc 2.9.4.1).
-- Templates for pattern matching on abstract syntax
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Language.Templatespiler.Skel where

import Language.Templatespiler.Abs qualified
import Prelude (Either (..), Show, String, show, ($), (++))

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Language.Templatespiler.Abs.Ident -> Result
transIdent x = case x of
  Language.Templatespiler.Abs.Ident string -> failure x

transType :: Show a => Language.Templatespiler.Abs.Type' a -> Result
transType x = case x of
  Language.Templatespiler.Abs.IntegerType _ -> failure x
  Language.Templatespiler.Abs.StringType _ -> failure x
  Language.Templatespiler.Abs.FloatType _ -> failure x
  Language.Templatespiler.Abs.CombinatorType _ combinator -> failure x

transBinding :: Show a => Language.Templatespiler.Abs.Binding' a -> Result
transBinding x = case x of
  Language.Templatespiler.Abs.Binding _ ident type_ -> failure x

transBindingGroup :: Show a => Language.Templatespiler.Abs.BindingGroup' a -> Result
transBindingGroup x = case x of
  Language.Templatespiler.Abs.BindingGroup _ bindings -> failure x

transBindingOrCombinator :: Show a => Language.Templatespiler.Abs.BindingOrCombinator' a -> Result
transBindingOrCombinator x = case x of
  Language.Templatespiler.Abs.NamedBinding _ binding -> failure x
  Language.Templatespiler.Abs.ParenBinding _ binding -> failure x
  Language.Templatespiler.Abs.UnnamedBinding _ combinator -> failure x

transCombinator :: Show a => Language.Templatespiler.Abs.Combinator' a -> Result
transCombinator x = case x of
  Language.Templatespiler.Abs.ParenCombinator _ combinator -> failure x
  Language.Templatespiler.Abs.ArrayCombinator _ varorconstint bindingorcombinator -> failure x
  Language.Templatespiler.Abs.SepByCombinator _ string bindinggroup -> failure x
  Language.Templatespiler.Abs.ListCombinator _ bindingorcombinator -> failure x

transVarOrConstInt :: Show a => Language.Templatespiler.Abs.VarOrConstInt' a -> Result
transVarOrConstInt x = case x of
  Language.Templatespiler.Abs.ConstInt _ integer -> failure x
  Language.Templatespiler.Abs.ConstVar _ ident -> failure x

transBindingList :: Show a => Language.Templatespiler.Abs.BindingList' a -> Result
transBindingList x = case x of
  Language.Templatespiler.Abs.BindingList _ bindings -> failure x
