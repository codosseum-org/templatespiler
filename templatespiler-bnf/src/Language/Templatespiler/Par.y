-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module Language.Templatespiler.Par
  ( happyError
  , myLexer
  , pBindingList
  ) where

import Prelude

import qualified Language.Templatespiler.Abs
import Language.Templatespiler.Lex
import qualified Data.Text

}

%name pBindingList_internal BindingList
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '('       { PT _ (TS _ 1)  }
  ')'       { PT _ (TS _ 2)  }
  ','       { PT _ (TS _ 3)  }
  ':'       { PT _ (TS _ 4)  }
  'Float'   { PT _ (TS _ 5)  }
  'Integer' { PT _ (TS _ 6)  }
  'String'  { PT _ (TS _ 7)  }
  '['       { PT _ (TS _ 8)  }
  ']'       { PT _ (TS _ 9)  }
  'array'   { PT _ (TS _ 10) }
  'list'    { PT _ (TS _ 11) }
  'sep-by'  { PT _ (TS _ 12) }
  L_Ident   { PT _ (TV _)    }
  L_integ   { PT _ (TI _)    }
  L_quoted  { PT _ (TL _)    }

%%

Ident :: { (Language.Templatespiler.Abs.BNFC'Position, Language.Templatespiler.Abs.Ident) }
Ident  : L_Ident { (uncurry Language.Templatespiler.Abs.BNFC'Position (tokenLineCol $1), Language.Templatespiler.Abs.Ident (tokenText $1)) }

Integer :: { (Language.Templatespiler.Abs.BNFC'Position, Integer) }
Integer  : L_integ  { (uncurry Language.Templatespiler.Abs.BNFC'Position (tokenLineCol $1), (read (Data.Text.unpack (tokenText $1))) :: Integer) }

String  :: { (Language.Templatespiler.Abs.BNFC'Position, String) }
String   : L_quoted { (uncurry Language.Templatespiler.Abs.BNFC'Position (tokenLineCol $1), (Data.Text.unpack ((\(PT _ (TL s)) -> s) $1))) }

Type :: { (Language.Templatespiler.Abs.BNFC'Position, Language.Templatespiler.Abs.Type) }
Type
  : 'Integer' { (uncurry Language.Templatespiler.Abs.BNFC'Position (tokenLineCol $1), Language.Templatespiler.Abs.IntegerType (uncurry Language.Templatespiler.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'String' { (uncurry Language.Templatespiler.Abs.BNFC'Position (tokenLineCol $1), Language.Templatespiler.Abs.StringType (uncurry Language.Templatespiler.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'Float' { (uncurry Language.Templatespiler.Abs.BNFC'Position (tokenLineCol $1), Language.Templatespiler.Abs.FloatType (uncurry Language.Templatespiler.Abs.BNFC'Position (tokenLineCol $1))) }
  | Combinator { (fst $1, Language.Templatespiler.Abs.CombinatorType (fst $1) (snd $1)) }

Binding :: { (Language.Templatespiler.Abs.BNFC'Position, Language.Templatespiler.Abs.Binding) }
Binding
  : Ident ':' Type { (fst $1, Language.Templatespiler.Abs.Binding (fst $1) (snd $1) (snd $3)) }

BindingGroup :: { (Language.Templatespiler.Abs.BNFC'Position, Language.Templatespiler.Abs.BindingGroup) }
BindingGroup
  : '[' ListBinding ']' { (uncurry Language.Templatespiler.Abs.BNFC'Position (tokenLineCol $1), Language.Templatespiler.Abs.BindingGroup (uncurry Language.Templatespiler.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }

ListBinding :: { (Language.Templatespiler.Abs.BNFC'Position, [Language.Templatespiler.Abs.Binding]) }
ListBinding
  : {- empty -} { (Language.Templatespiler.Abs.BNFC'NoPosition, []) }
  | Binding { (fst $1, (:[]) (snd $1)) }
  | Binding ',' ListBinding { (fst $1, (:) (snd $1) (snd $3)) }
  | {- empty -} { (Language.Templatespiler.Abs.BNFC'NoPosition, []) }
  | Binding ListBinding { (fst $1, (:) (snd $1) (snd $2)) }

BindingOrCombinator :: { (Language.Templatespiler.Abs.BNFC'Position, Language.Templatespiler.Abs.BindingOrCombinator) }
BindingOrCombinator
  : Binding { (fst $1, Language.Templatespiler.Abs.NamedBinding (fst $1) (snd $1)) }
  | BindingGroup { (fst $1, Language.Templatespiler.Abs.GroupBinding (fst $1) (snd $1)) }
  | '(' Binding ')' { (uncurry Language.Templatespiler.Abs.BNFC'Position (tokenLineCol $1), Language.Templatespiler.Abs.ParenBinding (uncurry Language.Templatespiler.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | Combinator { (fst $1, Language.Templatespiler.Abs.UnnamedBinding (fst $1) (snd $1)) }

Combinator :: { (Language.Templatespiler.Abs.BNFC'Position, Language.Templatespiler.Abs.Combinator) }
Combinator
  : '(' Combinator ')' { (uncurry Language.Templatespiler.Abs.BNFC'Position (tokenLineCol $1), Language.Templatespiler.Abs.ParenCombinator (uncurry Language.Templatespiler.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | 'array' VarOrConstInt BindingOrCombinator { (uncurry Language.Templatespiler.Abs.BNFC'Position (tokenLineCol $1), Language.Templatespiler.Abs.ArrayCombinator (uncurry Language.Templatespiler.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | 'sep-by' String BindingGroup { (uncurry Language.Templatespiler.Abs.BNFC'Position (tokenLineCol $1), Language.Templatespiler.Abs.SepByCombinator (uncurry Language.Templatespiler.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | 'list' BindingOrCombinator { (uncurry Language.Templatespiler.Abs.BNFC'Position (tokenLineCol $1), Language.Templatespiler.Abs.ListCombinator (uncurry Language.Templatespiler.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }

VarOrConstInt :: { (Language.Templatespiler.Abs.BNFC'Position, Language.Templatespiler.Abs.VarOrConstInt) }
VarOrConstInt
  : Integer { (fst $1, Language.Templatespiler.Abs.ConstInt (fst $1) (snd $1)) }
  | Ident { (fst $1, Language.Templatespiler.Abs.ConstVar (fst $1) (snd $1)) }

BindingList :: { (Language.Templatespiler.Abs.BNFC'Position, Language.Templatespiler.Abs.BindingList) }
BindingList
  : ListBinding { (fst $1, Language.Templatespiler.Abs.BindingList (fst $1) (snd $1)) }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: Data.Text.Text -> [Token]
myLexer = tokens

-- Entrypoints

pBindingList :: [Token] -> Err Language.Templatespiler.Abs.BindingList
pBindingList = fmap snd . pBindingList_internal
}

